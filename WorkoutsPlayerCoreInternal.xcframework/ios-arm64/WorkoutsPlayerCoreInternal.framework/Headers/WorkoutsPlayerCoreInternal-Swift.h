#if 0
#elif defined(__arm64__) && __arm64__
// Generated by Apple Swift version 5.7.2 (swiftlang-5.7.2.135.5 clang-1400.0.29.51)
#ifndef WORKOUTSPLAYERCOREINTERNAL_SWIFT_H
#define WORKOUTSPLAYERCOREINTERNAL_SWIFT_H
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wgcc-compat"

#if !defined(__has_include)
# define __has_include(x) 0
#endif
#if !defined(__has_attribute)
# define __has_attribute(x) 0
#endif
#if !defined(__has_feature)
# define __has_feature(x) 0
#endif
#if !defined(__has_warning)
# define __has_warning(x) 0
#endif

#if __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wduplicate-method-match"
#pragma clang diagnostic ignored "-Wauto-import"
#if defined(__OBJC__)
#include <Foundation/Foundation.h>
#endif
#if defined(__cplusplus)
#include <cstdint>
#include <cstddef>
#include <cstdbool>
#else
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>
#endif

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus)
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...)
# endif
#endif

#if __has_attribute(objc_runtime_name)
# define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
#else
# define SWIFT_RUNTIME_NAME(X)
#endif
#if __has_attribute(swift_name)
# define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
#else
# define SWIFT_COMPILE_NAME(X)
#endif
#if __has_attribute(objc_method_family)
# define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
#else
# define SWIFT_METHOD_FAMILY(X)
#endif
#if __has_attribute(noescape)
# define SWIFT_NOESCAPE __attribute__((noescape))
#else
# define SWIFT_NOESCAPE
#endif
#if __has_attribute(ns_consumed)
# define SWIFT_RELEASES_ARGUMENT __attribute__((ns_consumed))
#else
# define SWIFT_RELEASES_ARGUMENT
#endif
#if __has_attribute(warn_unused_result)
# define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
#else
# define SWIFT_WARN_UNUSED_RESULT
#endif
#if __has_attribute(noreturn)
# define SWIFT_NORETURN __attribute__((noreturn))
#else
# define SWIFT_NORETURN
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA
#endif
#if !defined(SWIFT_CLASS)
# if __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif
#if !defined(SWIFT_RESILIENT_CLASS)
# if __has_attribute(objc_class_stub)
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME) __attribute__((objc_class_stub))
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_class_stub)) SWIFT_CLASS_NAMED(SWIFT_NAME)
# else
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME)
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) SWIFT_CLASS_NAMED(SWIFT_NAME)
# endif
#endif

#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif

#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif

#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER
# endif
#endif
#if !defined(SWIFT_ENUM_ATTR)
# if defined(__has_attribute) && __has_attribute(enum_extensibility)
#  define SWIFT_ENUM_ATTR(_extensibility) __attribute__((enum_extensibility(_extensibility)))
# else
#  define SWIFT_ENUM_ATTR(_extensibility)
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name, _extensibility) enum _name : _type _name; enum SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# if __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) SWIFT_ENUM(_type, _name, _extensibility)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_WEAK_IMPORT)
# define SWIFT_WEAK_IMPORT __attribute__((weak_import))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if __has_feature(attribute_diagnose_if_objc)
# define SWIFT_DEPRECATED_OBJC(Msg) __attribute__((diagnose_if(1, Msg, "warning")))
#else
# define SWIFT_DEPRECATED_OBJC(Msg) SWIFT_DEPRECATED_MSG(Msg)
#endif
#if defined(__OBJC__)
#if !defined(IBSegueAction)
# define IBSegueAction
#endif
#endif
#if !defined(SWIFT_EXTERN)
# if defined(__cplusplus)
#  define SWIFT_EXTERN extern "C"
# else
#  define SWIFT_EXTERN extern
# endif
#endif
#if !defined(SWIFT_CALL)
# define SWIFT_CALL __attribute__((swiftcall))
#endif
#if defined(__cplusplus)
#if !defined(SWIFT_NOEXCEPT)
# define SWIFT_NOEXCEPT noexcept
#endif
#else
#if !defined(SWIFT_NOEXCEPT)
# define SWIFT_NOEXCEPT 
#endif
#endif
#if defined(__cplusplus)
#if !defined(SWIFT_CXX_INT_DEFINED)
#define SWIFT_CXX_INT_DEFINED
namespace swift {
using Int = ptrdiff_t;
using UInt = size_t;
}
#endif
#endif
#if defined(__OBJC__)
#if __has_feature(modules)
#if __has_warning("-Watimport-in-framework-header")
#pragma clang diagnostic ignored "-Watimport-in-framework-header"
#endif
@import Foundation;
@import ObjectiveC;
#endif

#endif
#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
#if __has_warning("-Wpragma-clang-attribute")
# pragma clang diagnostic ignored "-Wpragma-clang-attribute"
#endif
#pragma clang diagnostic ignored "-Wunknown-pragmas"
#pragma clang diagnostic ignored "-Wnullability"
#pragma clang diagnostic ignored "-Wdollar-in-identifier-extension"

#if __has_attribute(external_source_symbol)
# pragma push_macro("any")
# undef any
# pragma clang attribute push(__attribute__((external_source_symbol(language="Swift", defined_in="WorkoutsPlayerCoreInternal",generated_declaration))), apply_to=any(function,enum,objc_interface,objc_category,objc_protocol))
# pragma pop_macro("any")
#endif

#if defined(__OBJC__)

@class WorkoutBlock;
@class Workout;

SWIFT_PROTOCOL("_TtP26WorkoutsPlayerCoreInternal24EngineWorkoutInformation_")
@protocol EngineWorkoutInformation
@property (nonatomic) BOOL didReceiveInfoFromWatch;
@property (nonatomic) NSInteger avgHeartRate;
@property (nonatomic) NSInteger heartRate;
@property (nonatomic) NSInteger calories;
@property (nonatomic) NSInteger userWeight;
@property (nonatomic) float coachVolume;
@property (nonatomic, readonly, strong) WorkoutBlock * _Nullable currentBlock;
@property (nonatomic, readonly) NSTimeInterval currentBlockElapsedTime;
@property (nonatomic, readonly) float currentBlockProgressFloat;
@property (nonatomic, readonly) NSTimeInterval elapsedTime;
@property (nonatomic) BOOL isFormEnabled;
@property (nonatomic) BOOL isMotivationEnabled;
@property (nonatomic) BOOL isDirectionEnabled;
@property (nonatomic) BOOL isPacingEnabled;
@property (nonatomic) BOOL isBumpsEnabled;
@property (nonatomic, readonly) BOOL isPaused;
@property (nonatomic, readonly) BOOL isStarted;
@property (nonatomic) float volume;
@property (nonatomic, readonly, strong) Workout * _Nonnull workout;
@end

@class CancelReactiveAudioInfo;
@class DismissReactiveAudioInfo;
@class ReactiveAudioSnippet;

SWIFT_PROTOCOL("_TtP26WorkoutsPlayerCoreInternal24EngineWorkoutControlling_")
@protocol EngineWorkoutControlling
@property (nonatomic, readonly) BOOL canStartWorkout;
@property (nonatomic, readonly) BOOL canPauseWorkout;
@property (nonatomic, readonly) BOOL canResumeWorkout;
@property (nonatomic, readonly) BOOL canFinishWorkout;
@property (nonatomic, readonly) BOOL canDiscardWorkout;
@property (nonatomic, readonly) BOOL canDecreaseIntensity;
@property (nonatomic, readonly) BOOL canIncreaseIntensity;
@property (nonatomic, readonly) BOOL canReplaceBlock;
@property (nonatomic, readonly) BOOL canSkipBlock;
@property (nonatomic, readonly) BOOL canMarkBlockAsDone;
@property (nonatomic, readonly) BOOL isPlaying;
- (void)start;
- (void)finish;
- (void)discard;
- (void)pause;
- (void)resume;
- (void)decreaseIntensity;
- (void)increaseIntensity;
- (void)skipBlock;
- (void)markBlockDone;
- (void)replaceBlock;
- (void)stopPlayingCurrentBlock;
- (void)setCurrentBlock:(WorkoutBlock * _Nullable)block isAlreadySelected:(BOOL)isAlreadySelected;
- (void)dismissBump;
- (void)cancelReactiveAudioWithInfo:(CancelReactiveAudioInfo * _Nonnull)info;
- (void)dismissReactiveAudioWithInfo:(DismissReactiveAudioInfo * _Nonnull)info;
- (void)playWhenIsPossibleWithReactiveAudioSnippet:(ReactiveAudioSnippet * _Nonnull)reactiveAudioSnippet;
@end


SWIFT_PROTOCOL("_TtP26WorkoutsPlayerCoreInternal22EngineAudioDownloading_")
@protocol EngineAudioDownloading
@property (nonatomic, readonly) int64_t bytesToDownload;
@property (nonatomic, readonly) int64_t bytesDownloaded;
@end

@protocol AudioCoachingEngineDelegate;
@protocol AudioCoachingEngineDownloadingDelegate;
@protocol AudioCoachingEngineControlsDelegate;

SWIFT_PROTOCOL("_TtP26WorkoutsPlayerCoreInternal19AudioCoachingEngine_")
@protocol AudioCoachingEngine <EngineAudioDownloading, EngineWorkoutControlling, EngineWorkoutInformation>
- (nonnull instancetype)initWithWorkout:(Workout * _Nonnull)workout delegate:(id <AudioCoachingEngineDelegate> _Nullable)delegate downloadingDelegate:(id <AudioCoachingEngineDownloadingDelegate> _Nullable)downloadingDelegate;
@property (nonatomic, strong) id <AudioCoachingEngineDelegate> _Nullable delegate;
@property (nonatomic, strong) id <AudioCoachingEngineDownloadingDelegate> _Nullable downloadingDelegate;
@property (nonatomic, readonly, strong) id <AudioCoachingEngineControlsDelegate> _Nonnull controlsDelegate;
@end

@class Bump;

SWIFT_PROTOCOL("_TtP26WorkoutsPlayerCoreInternal32AudioCoachingEngineBumpsDelegate_")
@protocol AudioCoachingEngineBumpsDelegate
- (void)engine:(id <AudioCoachingEngine> _Nonnull)engine willStartPlayingBump:(Bump * _Nonnull)bump timeSinceNow:(NSTimeInterval)timeSinceNow;
- (void)engine:(id <AudioCoachingEngine> _Nonnull)engine didStartPlayingBump:(Bump * _Nonnull)bump;
- (void)engine:(id <AudioCoachingEngine> _Nonnull)engine didStopPlayingBump:(Bump * _Nonnull)bump;
@end

enum AudioCoachingType : NSInteger;

SWIFT_PROTOCOL("_TtP26WorkoutsPlayerCoreInternal35AudioCoachingEngineControlsDelegate_")
@protocol AudioCoachingEngineControlsDelegate
- (void)controlsDidToggleWithType:(enum AudioCoachingType)type newValue:(BOOL)newValue;
- (void)controlsDidChangeValueWithValue:(float)value;
- (void)controlsDidReceiveTap;
@end

@class NSURL;

SWIFT_PROTOCOL("_TtP26WorkoutsPlayerCoreInternal42AudioCoachingEngineWorkoutPlaybackDelegate_")
@protocol AudioCoachingEngineWorkoutPlaybackDelegate
- (void)engine:(id <AudioCoachingEngine> _Nonnull)engine didStartPlaying:(NSURL * _Nonnull)eventURL;
- (void)engine:(id <AudioCoachingEngine> _Nonnull)engine didStopPlaying:(NSURL * _Nonnull)eventURL;
@end

@class UpdateWorkoutActionObjc;

SWIFT_PROTOCOL("_TtP26WorkoutsPlayerCoreInternal41AudioCoachingEngineWorkoutActionsDelegate_")
@protocol AudioCoachingEngineWorkoutActionsDelegate
/// Use this callback to show an activity indicator
- (void)engine:(id <AudioCoachingEngine> _Nonnull)engine willPerform:(UpdateWorkoutActionObjc * _Nonnull)action;
/// Use this callback to stop any activities indicators you started in <code>willPerform</code>
- (void)engine:(id <AudioCoachingEngine> _Nonnull)engine didPerform:(UpdateWorkoutActionObjc * _Nonnull)action;
/// Use this callback to stop any activities indicators you started in <code>willPerform</code>
- (void)engine:(id <AudioCoachingEngine> _Nonnull)engine didFail:(UpdateWorkoutActionObjc * _Nonnull)action error:(NSError * _Nullable)error;
/// This is the most important delegate method the engine has. The engine calls this method when it performs an
/// action on the workout. Alter the workout based on the action, calling your backend.
/// \param engine the engine
///
/// \param action the action
///
/// \param workout the workout
///
/// \param retryCount use retry count to talk to the backend any number of times until success
///
/// \param onSuccess call this handler when the result is obtained
///
/// \param onError call this handler when an error is found
///
- (void)engine:(id <AudioCoachingEngine> _Nonnull)engine requests:(UpdateWorkoutActionObjc * _Nonnull)action on:(Workout * _Nonnull)workout retryCount:(NSInteger)retryCount onSuccess:(void (^ _Nonnull)(Workout * _Nonnull))onSuccess onError:(void (^ _Nonnull)(NSError * _Nonnull))onError;
@end


SWIFT_PROTOCOL("_TtP26WorkoutsPlayerCoreInternal34AudioCoachingEngineWorkoutDelegate_")
@protocol AudioCoachingEngineWorkoutDelegate
- (void)engine:(id <AudioCoachingEngine> _Nonnull)engine willStart:(Workout * _Nonnull)workout;
- (void)engine:(id <AudioCoachingEngine> _Nonnull)engine didStart:(Workout * _Nonnull)workout;
- (void)engine:(id <AudioCoachingEngine> _Nonnull)engine didDiscard:(Workout * _Nonnull)workout;
- (void)engine:(id <AudioCoachingEngine> _Nonnull)engine didFinish:(Workout * _Nonnull)workout heartRate:(NSInteger)heartRate calories:(NSInteger)calories;
- (void)engine:(id <AudioCoachingEngine> _Nonnull)engine didStartBlock:(WorkoutBlock * _Nonnull)block;
- (void)engine:(id <AudioCoachingEngine> _Nonnull)engine didFinishBlock:(WorkoutBlock * _Nonnull)block;
- (void)engine:(id <AudioCoachingEngine> _Nonnull)engine didPause:(WorkoutBlock * _Nonnull)block;
- (void)engine:(id <AudioCoachingEngine> _Nonnull)engine didResume:(WorkoutBlock * _Nonnull)block;
- (void)engine:(id <AudioCoachingEngine> _Nonnull)engine didChange:(WorkoutBlock * _Nonnull)block;
@end

enum InterruptionNotification : NSInteger;
@class NSDate;
@class NSNumber;

SWIFT_PROTOCOL("_TtP26WorkoutsPlayerCoreInternal27AudioCoachingEngineDelegate_")
@protocol AudioCoachingEngineDelegate <AudioCoachingEngineBumpsDelegate, AudioCoachingEngineWorkoutActionsDelegate, AudioCoachingEngineWorkoutDelegate, AudioCoachingEngineWorkoutPlaybackDelegate>
/// The engine will call this everytime the workout timer ticks.
/// \param engine the engine that is ticking. You can query other properties from it, such as block elapsed time.
///
/// \param elapsedTime the workout elapsed time.
///
- (void)engine:(id <AudioCoachingEngine> _Nonnull)engine elapsedTime:(NSTimeInterval)elapsedTime;
- (void)engine:(id <AudioCoachingEngine> _Nonnull)engine didReceiveInterruptionToPause:(enum InterruptionNotification)didReceiveInterruptionToPause;
- (void)engine:(id <AudioCoachingEngine> _Nonnull)engine didReceiveInterruptionToResume:(enum InterruptionNotification)didReceiveInterruptionToResume;
- (void)engineDidReceiveEventWorkoutUpdate:(id <AudioCoachingEngine> _Nonnull)engine;
- (void)engine:(id <AudioCoachingEngine> _Nonnull)engine didStartPlayingReactiveAudioSnippet:(ReactiveAudioSnippet * _Nonnull)reactiveAudioSnippet;
- (void)engine:(id <AudioCoachingEngine> _Nonnull)engine didStopPlayingReactiveAudioSnippet:(ReactiveAudioSnippet * _Nonnull)reactiveAudioSnippet;
- (BOOL)engineShouldObtainAVGHeartRateFromExternalSource:(id <AudioCoachingEngine> _Nonnull)engine SWIFT_WARN_UNUSED_RESULT;
- (void)engine:(id <AudioCoachingEngine> _Nonnull)engine externalSourceAVGHeartRateSince:(NSDate * _Nonnull)since toEndDate:(NSDate * _Nonnull)end completionHandler:(void (^ _Nonnull)(NSNumber * _Nullable, NSError * _Nullable))completionHandler;
@end


SWIFT_PROTOCOL("_TtP26WorkoutsPlayerCoreInternal38AudioCoachingEngineDownloadingDelegate_")
@protocol AudioCoachingEngineDownloadingDelegate
- (void)engine:(id <AudioCoachingEngine> _Nonnull)engine willStartDownloading:(Workout * _Nonnull)workout;
- (void)engine:(id <AudioCoachingEngine> _Nonnull)engine didFinishDownloading:(Workout * _Nonnull)workout;
- (void)engine:(id <AudioCoachingEngine> _Nonnull)engine didProgressDownloading:(Workout * _Nonnull)workout;
@end





SWIFT_CLASS("_TtC26WorkoutsPlayerCoreInternal27AudioCoachingPreferenceObjc")
@interface AudioCoachingPreferenceObjc : NSObject
@property (nonatomic, readonly) NSInteger id;
@property (nonatomic, readonly, strong) NSNumber * _Nullable coachId;
@property (nonatomic, readonly, strong) NSNumber * _Nullable isAudioDirection;
@property (nonatomic, readonly, strong) NSNumber * _Nullable isAudioMotivation;
@property (nonatomic, readonly, strong) NSNumber * _Nullable isAudioForm;
@property (nonatomic, readonly, strong) NSNumber * _Nullable isAudioPacing;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


@class IntUpdateWorkoutActionType;
@class NSString;
@class MetricUpdateWorkoutActionType;
@class AudioCoachingPreferenceUpdateWorkoutActionType;

SWIFT_CLASS("_TtC26WorkoutsPlayerCoreInternal23UpdateWorkoutActionObjc")
@interface UpdateWorkoutActionObjc : NSObject
+ (IntUpdateWorkoutActionType * _Nonnull)finish:(NSInteger)completedSeconds SWIFT_WARN_UNUSED_RESULT;
@property (nonatomic, readonly, copy) NSString * _Nonnull name;
+ (IntUpdateWorkoutActionType * _Nonnull)autoAdvance:(NSInteger)position SWIFT_WARN_UNUSED_RESULT;
+ (IntUpdateWorkoutActionType * _Nonnull)done:(NSInteger)position SWIFT_WARN_UNUSED_RESULT;
+ (IntUpdateWorkoutActionType * _Nonnull)up:(NSInteger)position SWIFT_WARN_UNUSED_RESULT;
+ (IntUpdateWorkoutActionType * _Nonnull)down:(NSInteger)position SWIFT_WARN_UNUSED_RESULT;
+ (IntUpdateWorkoutActionType * _Nonnull)replace:(NSInteger)position SWIFT_WARN_UNUSED_RESULT;
+ (IntUpdateWorkoutActionType * _Nonnull)like:(NSInteger)position SWIFT_WARN_UNUSED_RESULT;
+ (IntUpdateWorkoutActionType * _Nonnull)dislike:(NSInteger)position SWIFT_WARN_UNUSED_RESULT;
+ (IntUpdateWorkoutActionType * _Nonnull)skip:(NSInteger)position SWIFT_WARN_UNUSED_RESULT;
+ (MetricUpdateWorkoutActionType * _Nonnull)metricsWithHeartRate:(NSInteger)heartRate calories:(NSInteger)calories SWIFT_WARN_UNUSED_RESULT;
+ (AudioCoachingPreferenceUpdateWorkoutActionType * _Nonnull)changeAudioCoachingPreferenceWithPreference:(AudioCoachingPreferenceObjc * _Nonnull)preference SWIFT_WARN_UNUSED_RESULT;
+ (UpdateWorkoutActionObjc * _Nonnull)discard SWIFT_WARN_UNUSED_RESULT;
+ (UpdateWorkoutActionObjc * _Nonnull)start SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC26WorkoutsPlayerCoreInternal46AudioCoachingPreferenceUpdateWorkoutActionType")
@interface AudioCoachingPreferenceUpdateWorkoutActionType : UpdateWorkoutActionObjc
@end

typedef SWIFT_ENUM(NSInteger, AudioCoachingType, open) {
  AudioCoachingTypeDirection = 0,
  AudioCoachingTypeForm = 1,
  AudioCoachingTypeMotivation = 2,
  AudioCoachingTypePacing = 3,
};


/// The audio player uses an instance of AVPlayer to play local or remotes sounds loaded from URLs.
/// You can create as many players as you need. Or just store a single instance in your context.
/// <ul>
///   <li>
///     Set up a delegate o receive update information.
///   </li>
///   <li>
///     Change the volume
///   </li>
///   <li>
///     Enable Background playback
///   </li>
/// </ul>
SWIFT_CLASS("_TtC26WorkoutsPlayerCoreInternal14AudioPlayerImp")
@interface AudioPlayerImp : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class StubBehavior;

SWIFT_PROTOCOL("_TtP26WorkoutsPlayerCoreInternal11BackendObjc_")
@protocol BackendObjc
@property (nonatomic, readonly, strong) StubBehavior * _Nonnull stubBehavior;
@property (nonatomic, readonly, copy) NSString * _Nonnull baseUrl;
@property (nonatomic, readonly, copy) NSString * _Nonnull stagingUrl;
@property (nonatomic, readonly, copy) NSDictionary<NSString *, NSString *> * _Nonnull headers;
@end


SWIFT_CLASS_NAMED("Bump")
@interface Bump : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end







@interface NSBundle (SWIFT_EXTENSION(WorkoutsPlayerCoreInternal))
@property (nonatomic, readonly, copy) NSString * _Nullable versionAndBuildNumbersWithoutUnderscores;
@end


SWIFT_CLASS_NAMED("CancelReactiveAudioInfo")
@interface CancelReactiveAudioInfo : NSObject
@end



SWIFT_CLASS_NAMED("DismissReactiveAudioInfo")
@interface DismissReactiveAudioInfo : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end




/// Downloads one or multiple files concurrently.
/// Create an instance for regular downloads. You can use the <code>.backgroundShared</code> instance if you want to continue
/// downloads in background
/// <ul>
///   <li>
///     <code>URLSessionDelegate</code> so download progress is monitored
///   </li>
///   <li>
///     <code>URLSessionDownloadDelegate</code> so background downloads can be completed.
///   </li>
/// </ul>
/// <em>Important</em> If you use the <code>.backgroundShared</code> you must set <code>backgroundCompletionHandler</code> in your app delegate.
/// See the <code>backgroundCompletionHandler</code> documentation
SWIFT_CLASS("_TtC26WorkoutsPlayerCoreInternal10Downloader")
@interface Downloader : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class NSURLSession;
@class NSURLSessionTask;
@class NSURLSessionDownloadTask;

@interface Downloader (SWIFT_EXTENSION(WorkoutsPlayerCoreInternal)) <NSURLSessionDownloadDelegate>
- (void)URLSession:(NSURLSession * _Nonnull)session task:(NSURLSessionTask * _Nonnull)task didCompleteWithError:(NSError * _Nullable)error;
- (void)URLSession:(NSURLSession * _Nonnull)session downloadTask:(NSURLSessionDownloadTask * _Nonnull)downloadTask didFinishDownloadingToURL:(NSURL * _Nonnull)location;
- (void)URLSession:(NSURLSession * _Nonnull)session downloadTask:(NSURLSessionDownloadTask * _Nonnull)downloadTask didWriteData:(int64_t)bytesWritten totalBytesWritten:(int64_t)totalBytesWritten totalBytesExpectedToWrite:(int64_t)totalBytesExpectedToWrite;
- (void)URLSessionDidFinishEventsForBackgroundURLSession:(NSURLSession * _Nonnull)_;
@end


@class User;

/// Default engine delegate. Talks to the default endpoint configured in the environmment to put changes in the workout.
SWIFT_CLASS("_TtC26WorkoutsPlayerCoreInternal16EngineController")
@interface EngineController : NSObject
@property (nonatomic, weak) id <AudioCoachingEngineDelegate> _Nullable delegate;
- (nonnull instancetype)initWithEngine:(id <AudioCoachingEngine> _Nonnull)engine user:(User * _Nullable)user backend:(id <BackendObjc> _Nonnull)backend delegate:(id <AudioCoachingEngineDelegate> _Nullable)delegate OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end



@interface EngineController (SWIFT_EXTENSION(WorkoutsPlayerCoreInternal)) <AudioCoachingEngineDelegate>
- (BOOL)engineShouldObtainAVGHeartRateFromExternalSource:(id <AudioCoachingEngine> _Nonnull)engine SWIFT_WARN_UNUSED_RESULT;
- (void)engine:(id <AudioCoachingEngine> _Nonnull)engine externalSourceAVGHeartRateSince:(NSDate * _Nonnull)since toEndDate:(NSDate * _Nonnull)end completionHandler:(void (^ _Nonnull)(NSNumber * _Nullable, NSError * _Nullable))completionHandler;
- (void)engine:(id <AudioCoachingEngine> _Nonnull)engine didStartPlaying:(NSURL * _Nonnull)eventURL;
- (void)engine:(id <AudioCoachingEngine> _Nonnull)engine didStopPlaying:(NSURL * _Nonnull)eventURL;
- (void)engine:(id <AudioCoachingEngine> _Nonnull)engine willStartPlayingBump:(Bump * _Nonnull)bump timeSinceNow:(NSTimeInterval)timeSinceNow;
- (void)engine:(id <AudioCoachingEngine> _Nonnull)engine didStartPlayingBump:(Bump * _Nonnull)bump;
- (void)engine:(id <AudioCoachingEngine> _Nonnull)engine didStopPlayingReactiveAudioSnippet:(ReactiveAudioSnippet * _Nonnull)reactiveAudioSnippet;
- (void)engine:(id <AudioCoachingEngine> _Nonnull)engine didStartPlayingReactiveAudioSnippet:(ReactiveAudioSnippet * _Nonnull)reactiveAudioSnippet;
- (void)engine:(id <AudioCoachingEngine> _Nonnull)engine didStopPlayingBump:(Bump * _Nonnull)bump;
- (void)engine:(id <AudioCoachingEngine> _Nonnull)engine didReceiveInterruptionToPause:(enum InterruptionNotification)interruption;
- (void)engine:(id <AudioCoachingEngine> _Nonnull)engine didReceiveInterruptionToResume:(enum InterruptionNotification)interruption;
- (void)engine:(id <AudioCoachingEngine> _Nonnull)engine elapsedTime:(NSTimeInterval)elapsedTime;
- (void)engine:(id <AudioCoachingEngine> _Nonnull)engine willPerform:(UpdateWorkoutActionObjc * _Nonnull)action;
- (void)engine:(id <AudioCoachingEngine> _Nonnull)engine didPerform:(UpdateWorkoutActionObjc * _Nonnull)action;
- (void)engine:(id <AudioCoachingEngine> _Nonnull)engine didFail:(UpdateWorkoutActionObjc * _Nonnull)action error:(NSError * _Nullable)error;
- (void)engineDidReceiveEventWorkoutUpdate:(id <AudioCoachingEngine> _Nonnull)engine;
- (void)engine:(id <AudioCoachingEngine> _Nonnull)engine requests:(UpdateWorkoutActionObjc * _Nonnull)action on:(Workout * _Nonnull)workout retryCount:(NSInteger)retryCount onSuccess:(void (^ _Nonnull)(Workout * _Nonnull))onSuccess onError:(void (^ _Nonnull)(NSError * _Nonnull))onError;
- (void)engine:(id <AudioCoachingEngine> _Nonnull)engine didStartBlock:(WorkoutBlock * _Nonnull)block;
- (void)engine:(id <AudioCoachingEngine> _Nonnull)engine didFinishBlock:(WorkoutBlock * _Nonnull)block;
- (void)engine:(id <AudioCoachingEngine> _Nonnull)engine didPause:(WorkoutBlock * _Nonnull)block;
- (void)engine:(id <AudioCoachingEngine> _Nonnull)engine didResume:(WorkoutBlock * _Nonnull)block;
- (void)engine:(id <AudioCoachingEngine> _Nonnull)engine didChange:(WorkoutBlock * _Nonnull)block;
- (void)engine:(id <AudioCoachingEngine> _Nonnull)engine willStart:(Workout * _Nonnull)workout;
- (void)engine:(id <AudioCoachingEngine> _Nonnull)engine didStart:(Workout * _Nonnull)workout;
- (void)engine:(id <AudioCoachingEngine> _Nonnull)engine didDiscard:(Workout * _Nonnull)workout;
- (void)engine:(id <AudioCoachingEngine> _Nonnull)engine didFinish:(Workout * _Nonnull)workout heartRate:(NSInteger)heartRate calories:(NSInteger)calories;
@end




SWIFT_CLASS("_TtC26WorkoutsPlayerCoreInternal18GenericBackendObjc")
@interface GenericBackendObjc : NSObject <BackendObjc>
@property (nonatomic, strong) StubBehavior * _Nonnull stubBehavior;
@property (nonatomic, copy) NSString * _Nonnull baseUrl;
@property (nonatomic, copy) NSString * _Nonnull stagingUrl;
@property (nonatomic, copy) NSDictionary<NSString *, NSString *> * _Nonnull headers;
- (nonnull instancetype)initWithStubBehavior:(StubBehavior * _Nonnull)stubBehavior baseUrl:(NSString * _Nonnull)baseUrl stagingUrl:(NSString * _Nonnull)stagingUrl headers:(NSDictionary<NSString *, NSString *> * _Nonnull)headers OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

enum UpdateWorkoutActionKind : NSInteger;

SWIFT_CLASS("_TtC26WorkoutsPlayerCoreInternal26IntUpdateWorkoutActionType")
@interface IntUpdateWorkoutActionType : UpdateWorkoutActionObjc
- (nonnull instancetype)initWithKind:(enum UpdateWorkoutActionKind)kind value:(NSInteger)value OBJC_DESIGNATED_INITIALIZER;
@end

typedef SWIFT_ENUM(NSInteger, InterruptionNotification, open) {
  InterruptionNotificationAudioSessionInterruptionDidBegin = 0,
  InterruptionNotificationAudioSessionInterruptionDidEndAndPlaybackShouldResume = 1,
  InterruptionNotificationAudioSessionInterruptionDidEndAndPlaybackShouldNotResume = 2,
  InterruptionNotificationPhoneCallDidDisconnect = 3,
  InterruptionNotificationPhoneCallDidStartDialing = 4,
  InterruptionNotificationPhoneCallDidReceiveIncoming = 5,
  InterruptionNotificationPhoneCallDidConnect = 6,
  InterruptionNotificationTestPause = 7,
  InterruptionNotificationTestResume = 8,
};


SWIFT_CLASS_NAMED("IsPlayedBump")
@interface IsPlayedBump : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end



SWIFT_CLASS("_TtC26WorkoutsPlayerCoreInternal29MetricUpdateWorkoutActionType")
@interface MetricUpdateWorkoutActionType : UpdateWorkoutActionObjc
@end


SWIFT_CLASS("_TtC26WorkoutsPlayerCoreInternal15MuuvBackendObjc")
@interface MuuvBackendObjc : NSObject <BackendObjc>
@property (nonatomic, readonly, copy) NSString * _Nonnull baseUrl;
@property (nonatomic, readonly, copy) NSString * _Nonnull stagingUrl;
@property (nonatomic, readonly, copy) NSDictionary<NSString *, NSString *> * _Nonnull headers;
@property (nonatomic, readonly, strong) StubBehavior * _Nonnull stubBehavior;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC26WorkoutsPlayerCoreInternal9MuuvBlock")
@interface MuuvBlock : NSObject
@property (nonatomic) BOOL canBeReplaced;
@property (nonatomic, copy) NSString * _Nullable setName;
@end


SWIFT_PROTOCOL_NAMED("PlayableBlock")
@protocol PlayableBlock
@property (nonatomic, readonly, copy) NSString * _Nonnull identifier;
@property (nonatomic, readonly, copy) NSURL * _Nullable downloadableURL;
@property (nonatomic, readonly) NSInteger intensity;
@property (nonatomic, readonly) BOOL isEveryMinuteOnTheMinute;
@property (nonatomic, readonly) BOOL canBeReplaced;
@property (nonatomic, readonly) NSInteger numberOfSets;
@property (nonatomic, readonly) NSInteger repetitions;
@property (nonatomic, readonly) NSTimeInterval restTimeInSeconds;
@property (nonatomic, readonly, copy) NSString * _Nonnull title;
@property (nonatomic, readonly, copy) NSString * _Nullable durationToShow;
@property (nonatomic, readonly, copy) NSString * _Nullable setName;
@property (nonatomic, readonly, copy) NSURL * _Nullable videoURL;
@end


@interface MuuvBlock (SWIFT_EXTENSION(WorkoutsPlayerCoreInternal)) <PlayableBlock>
@property (nonatomic, readonly, copy) NSString * _Nonnull identifier;
@property (nonatomic, readonly) NSInteger intensity;
@property (nonatomic, readonly) BOOL isEveryMinuteOnTheMinute;
@property (nonatomic, readonly) NSInteger numberOfSets;
@property (nonatomic, readonly) NSInteger repetitions;
@property (nonatomic, readonly) NSTimeInterval restTimeInSeconds;
@property (nonatomic, readonly, copy) NSString * _Nullable durationToShow;
@property (nonatomic, readonly, copy) NSString * _Nonnull title;
@property (nonatomic, readonly, copy) NSURL * _Nullable videoURL;
@property (nonatomic, readonly, copy) NSURL * _Nullable downloadableURL;
@end


/// The entry point for the sdk, a facade providing all the possible actions to instantiate players.
SWIFT_CLASS("_TtC26WorkoutsPlayerCoreInternal7MuuvSDK")
@interface MuuvSDK : NSObject
/// Stops the current audio player and removes some used objects
- (void)tearDown;
@property (nonatomic, readonly, strong) id <AudioCoachingEngine> _Nullable currentEngine;
/// Creates an audio coaching engine and keeps it as its current standalone engine, so the sdk is able to receive
/// notificatios from Siri
/// \param workout the player will use this workout object to navigate through blocks, play each block and perform all
/// the workout actions
///
/// \param delegate register a delegate that will keep track of all the events in the workout and most important, will
/// comunicate with a backend to perform the workout actions
///
/// \param downloadingDelegate the engine can report the downloading progress of each block to this delegate
///
/// \param useAppleWatch set to <code>true</code> if you want the sdk to integrate <code>WatchKit</code> and create the necessary
/// controllers to synchronize the workout with the watch.
///
/// \param useHealthKit set to <code>true</code> if you want the sdk to integrate <code>HealthKit</code>and create the necessary controllers
/// to save the workout information to <code>HealthKit</code>.
///
///
/// returns:
/// a <code>AudioCoachingEngine</code>instance ready to be used with any UI
- (id <AudioCoachingEngine> _Nonnull)createAudioCoachingEngineWithWorkout:(Workout * _Nonnull)workout delegate:(id <AudioCoachingEngineDelegate> _Nullable)delegate downloadingDelegate:(id <AudioCoachingEngineDownloadingDelegate> _Nullable)downloadingDelegate;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@class MuuvSDKTools;

/// Builds all the moving parts that the engine needs. it Creates the engine, the player and all their companions:
/// an <code>EngineController</code> which is the Engine’s delegate and talks to endpoints and does custom logic that the engine
/// shouldn’t do,
/// an <code>EngineHealthKitController</code> which receives events from the engine to save the workout to HK for example. Read
/// bellow for more information:
/// <ul>
///   <li>
///     Bridges  <code>AudioCoachingEngine</code> with <code>AppleWatch</code> using <code>AppleWatchEngineBridge</code>
///   </li>
/// </ul>
SWIFT_CLASS("_TtC26WorkoutsPlayerCoreInternal31MuuvSDKEngineIntegrationBuilder")
@interface MuuvSDKEngineIntegrationBuilder : NSObject
@property (nonatomic, readonly, strong) MuuvSDKTools * _Nullable toolbox;
@property (nonatomic, readonly, strong) id <AudioCoachingEngine> _Nonnull engine;
@property (nonatomic, readonly, strong) EngineController * _Nonnull engineController;
/// <ul>
///   <li>
///     backend: the backend that will be used to configure the engine controller with.
///   </li>
/// </ul>
- (nonnull instancetype)initWithToolbox:(MuuvSDKTools * _Nullable)toolbox workout:(Workout * _Nonnull)workout engineDelegate:(id <AudioCoachingEngineDelegate> _Nullable)engineDelegate downloadingDelegate:(id <AudioCoachingEngineDownloadingDelegate> _Nullable)downloadingDelegate backend:(id <BackendObjc> _Nonnull)backend OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// The sdk uses these tools independently of the engine. For example, to query for HK stuff or send info to the apple
/// watch.
/// <ul>
///   <li>
///     <code>HealthKit</code> implemented by <code>HealthKitManager</code> talks to the HealthKit Store
///   </li>
///   <li>
///     <code>HealthKitAuthorizer</code> implemented by <code>DefaultHealthKitAuthorizer</code>
///   </li>
///   <li>
///     <code>AppleWatch</code> implemented by <code>AppleWatchManager</code>
///   </li>
/// </ul>
SWIFT_CLASS("_TtC26WorkoutsPlayerCoreInternal12MuuvSDKTools")
@interface MuuvSDKTools : NSObject
@property (nonatomic, strong) id <BackendObjc> _Nonnull backend;
/// Instantiates the
/// \param appleWatch the apple watch implementation, used to sync workouts with the engine
///
/// \param healthKit the HealthKit implementation that is used to sync the watch and also save the workout progress,
/// heart rate and more.
///
/// \param healthKitAuthorizer the authorized used to prompt the user for HK authorization, to show a primer for
/// example
///
- (nonnull instancetype)initWithBackend:(id <BackendObjc> _Nonnull)backend OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC26WorkoutsPlayerCoreInternal11MuuvWorkout")
@interface MuuvWorkout : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end



@protocol PlayableWorkoutSection;

SWIFT_PROTOCOL_NAMED("PlayableWorkout")
@protocol PlayableWorkout
@property (nonatomic, readonly) NSInteger identifier;
@property (nonatomic, readonly, copy) NSString * _Nonnull title;
@property (nonatomic, readonly, copy) NSArray<id <PlayableWorkoutSection>> * _Nonnull workoutSections;
@property (nonatomic, readonly) NSTimeInterval durationInSeconds;
@property (nonatomic, readonly, copy) NSString * _Nullable type;
@end


@interface MuuvWorkout (SWIFT_EXTENSION(WorkoutsPlayerCoreInternal)) <PlayableWorkout>
@property (nonatomic, readonly) NSInteger identifier;
@property (nonatomic, readonly, copy) NSString * _Nonnull title;
@property (nonatomic, readonly, copy) NSArray<id <PlayableWorkoutSection>> * _Nonnull workoutSections;
@property (nonatomic, readonly, copy) NSString * _Nullable type;
@property (nonatomic, readonly) NSTimeInterval durationInSeconds;
@end


SWIFT_CLASS("_TtC26WorkoutsPlayerCoreInternal16MuuvWorkoutBlock")
@interface MuuvWorkoutBlock : NSObject
@property (nonatomic) NSInteger level;
@end


SWIFT_PROTOCOL_NAMED("PlayableWorkoutBlock")
@protocol PlayableWorkoutBlock
@property (nonatomic, readonly, copy) NSArray<id <PlayableBlock>> * _Nonnull intensityBlocks;
@property (nonatomic, readonly) NSInteger level;
- (id <PlayableBlock> _Nullable)blockWithIntensity:(NSInteger)intensity SWIFT_WARN_UNUSED_RESULT;
@end


@interface MuuvWorkoutBlock (SWIFT_EXTENSION(WorkoutsPlayerCoreInternal)) <PlayableWorkoutBlock>
@property (nonatomic, readonly, copy) NSArray<id <PlayableBlock>> * _Nonnull intensityBlocks;
- (id <PlayableBlock> _Nullable)blockWithIntensity:(NSInteger)intensity SWIFT_WARN_UNUSED_RESULT;
@end


SWIFT_CLASS("_TtC26WorkoutsPlayerCoreInternal18MuuvWorkoutSection")
@interface MuuvWorkoutSection : NSObject
@end


SWIFT_PROTOCOL_NAMED("PlayableWorkoutSection")
@protocol PlayableWorkoutSection
@property (nonatomic, readonly, copy) NSString * _Nonnull title;
@property (nonatomic, readonly, copy) NSArray<id <PlayableWorkoutBlock>> * _Nonnull blocks;
@property (nonatomic, readonly) NSInteger numberOfBlocks;
- (id <PlayableBlock> _Nullable)blockAtIndex:(NSInteger)atIndex intensity:(NSInteger)intensity SWIFT_WARN_UNUSED_RESULT;
@end


@interface MuuvWorkoutSection (SWIFT_EXTENSION(WorkoutsPlayerCoreInternal)) <PlayableWorkoutSection>
@property (nonatomic, readonly, copy) NSArray<id <PlayableWorkoutBlock>> * _Nonnull blocks;
@property (nonatomic, readonly) NSInteger numberOfBlocks;
- (id <PlayableBlock> _Nullable)blockAtIndex:(NSInteger)atIndex intensity:(NSInteger)intensity SWIFT_WARN_UNUSED_RESULT;
@property (nonatomic, readonly, copy) NSString * _Nonnull title;
@end

typedef SWIFT_ENUM(NSInteger, ObjcStubbingBehavior, open) {
  ObjcStubbingBehaviorNever = 0,
  ObjcStubbingBehaviorNow = 1,
  ObjcStubbingBehaviorAfter = 2,
  ObjcStubbingBehaviorError = 3,
};






SWIFT_CLASS_NAMED("ReactiveAudioSnippet")
@interface ReactiveAudioSnippet : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


@class NSError;

SWIFT_CLASS("_TtC26WorkoutsPlayerCoreInternal12StubBehavior")
@interface StubBehavior : NSObject
- (nonnull instancetype)initWithKind:(enum ObjcStubbingBehavior)kind time:(NSNumber * _Nullable)time error:(NSError * _Nullable)error OBJC_DESIGNATED_INITIALIZER;
+ (StubBehavior * _Nonnull)never SWIFT_WARN_UNUSED_RESULT;
+ (StubBehavior * _Nonnull)now SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end




typedef SWIFT_ENUM(NSInteger, UpdateWorkoutActionKind, open) {
  UpdateWorkoutActionKindMetrics = 0,
  UpdateWorkoutActionKindFinishWorkout = 1,
  UpdateWorkoutActionKindDiscardWorkout = 2,
  UpdateWorkoutActionKindAutoAdvance = 3,
  UpdateWorkoutActionKindDone = 4,
  UpdateWorkoutActionKindUp = 5,
  UpdateWorkoutActionKindDown = 6,
  UpdateWorkoutActionKindReplace = 7,
  UpdateWorkoutActionKindLike = 8,
  UpdateWorkoutActionKindDislike = 9,
  UpdateWorkoutActionKindSkip = 10,
  UpdateWorkoutActionKindChangeAudioCoachingPreference = 11,
  UpdateWorkoutActionKindStartWorkout = 12,
};



SWIFT_CLASS("_TtC26WorkoutsPlayerCoreInternal4User")
@interface User : NSObject
@end


SWIFT_CLASS_NAMED("WebSocketBumpMessage")
@interface WebSocketBumpMessage : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end



SWIFT_CLASS("_TtC26WorkoutsPlayerCoreInternal16WebSocketMessage")
@interface WebSocketMessage : NSObject
@end


SWIFT_CLASS_NAMED("Workout")
@interface Workout : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end







@interface Workout (SWIFT_EXTENSION(WorkoutsPlayerCoreInternal)) <PlayableWorkout>
@property (nonatomic, readonly, copy) NSString * _Nullable type;
@property (nonatomic, readonly) NSInteger identifier;
@property (nonatomic, readonly) NSTimeInterval durationInSeconds;
@property (nonatomic, readonly, copy) NSArray<id <PlayableWorkoutSection>> * _Nonnull workoutSections;
@property (nonatomic, readonly, copy) NSString * _Nonnull title;
@end


SWIFT_CLASS("_TtC26WorkoutsPlayerCoreInternal12WorkoutBlock")
@interface WorkoutBlock : NSObject
@property (nonatomic, copy) NSString * _Nullable setName;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
@end









@interface WorkoutBlock (SWIFT_EXTENSION(WorkoutsPlayerCoreInternal)) <PlayableBlock>
@property (nonatomic, readonly) BOOL canBeReplaced;
@property (nonatomic, readonly) NSInteger intensity;
@property (nonatomic, readonly, copy) NSString * _Nonnull identifier;
@property (nonatomic, readonly) BOOL isEveryMinuteOnTheMinute;
@property (nonatomic, readonly) NSInteger numberOfSets;
@property (nonatomic, readonly) NSInteger repetitions;
@property (nonatomic, readonly) NSTimeInterval restTimeInSeconds;
@property (nonatomic, readonly, copy) NSString * _Nullable durationToShow;
@property (nonatomic, readonly, copy) NSString * _Nonnull title;
@property (nonatomic, readonly, copy) NSURL * _Nullable videoURL;
@property (nonatomic, readonly, copy) NSURL * _Nullable downloadableURL;
@end


SWIFT_PROTOCOL("_TtP26WorkoutsPlayerCoreInternal13WorkoutPlayer_")
@protocol WorkoutPlayer
@property (nonatomic, readonly, strong) id <PlayableWorkout> _Nonnull workout;
@end

#endif
#if defined(__cplusplus)
#endif
#if __has_attribute(external_source_symbol)
# pragma clang attribute pop
#endif
#pragma clang diagnostic pop
#endif

#else
#error unsupported Swift architecture
#endif
